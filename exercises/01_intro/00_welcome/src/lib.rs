// これは Rust ファイルです。`.rs` という拡張子を持つプレーンテキストファイルです。
//
// ほとんどのモダンなプログラミング言語と同様に、Rust でもコメントをサポートしています。
// まさに今あなたが読んでいるのがコメントです！
// コメントはコンパイラによって無視されるため、コードに注釈や説明を添えることができます。
// Rust には用途に応じていくつかのコメント記法がありますが、
// まずは最も一般的な “行コメント” を使いましょう。
// `//` から行末までがコメントとして扱われます。

// 演習には `TODO`, `todo!()` あるいは `__` というマーカーが含まれており、
// あなたがコードを書く必要がある箇所を示しています。
// これらのマーカーを自分のコードに置き換えて演習を完成させてください。
// 1 行で済むこともあれば、複数行を書く必要があることもあります。
//
// もし 10 分以上行き詰まったら、トレーナーに声をかけてください！私たちがサポートします。
// すべての演習の解答は `solutions` ブランチにも用意されています。
fn greeting() -> &'static str {
    // TODO: ここを修正してください 👇
    "I'm ready to learn Rust!"
}

// あなたの解答は自動テストで検証されます。
// ルートディレクトリで `cargo test` コマンドを実行すればテストを走らせられます。
// これは裏で `wr` コマンドがやっていることと同じです。
//
// Rust ではコードと一緒にテストを書くことができます。
// `#[cfg(test)]` 属性は、テスト実行時（`cargo test` を走らせたとき）にのみ
// 以下のコードをコンパイルするようコンパイラに指示します。
// 属性やテストについては後ほど詳しく学びます。
// 今は、正解を検証するテストを探すには `#[cfg(test)]` を目印にすると覚えておいてください。
//
// ⚠️ **テストを変更しないでください** ⚠️
// テストはあなたの解答が正しいかを確認するために用意されています。
// 変更すべきなのはテストではなく、テスト対象のコードだけです。
#[cfg(test)]
mod tests {
    use crate::greeting;

    #[test]
    fn test_welcome() {
        assert_eq!(greeting(), "I'm ready to learn Rust!");
    }
}
